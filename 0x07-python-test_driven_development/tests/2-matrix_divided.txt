=============================
The module ``2-matrix_divided``
=============================

Import module:

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

module Docstring check:
	>>> mod = __import__("2-matrix_divided").__doc__
	>>> len(mod) > 1
	True

function Docstring check:
	>>> func = __import__("2-matrix_divided").matrix_divided.__doc__
	>>> len(func) > 1
	True

PEP8 check:
	>>> import os
	>>> os.popen("pep8 2-matrix_divided.py").read()
	''

Test main:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test QA Review:
	>>> matrix_divided([[3]], 3)
	[[1.0]]

	>>> matrix_divided( [[3, 9], [12, 15]], -3)
	[[-1.0, -3.0], [-4.0, -5.0]]

	>>> matrix_divided([[3, 9], [12, 15]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

	>>> matrix_divided([[3, 9], [12, 15, 3]], 3)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

	>>> matrix_divided([[3, "9"], [15, 3]], 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[3, "9"], [15, 3]], "2.0")
	Traceback (most recent call last):
	...
	TypeError: div must be a number

	>>> matrix_divided([[3, 9], [15, 3]], 3.4)
	[[0.88, 2.65], [4.41, 0.88]]

	>>> matrix_divided([[3, 9], [15, 3]], float("inf"))
	[[0.0, 0.0], [0.0, 0.0]]

	>>> matrix_divided([[3, 9], [(float("inf"/"nan")), 3]], 6)
	Traceback (most recent call last):
	...
	TypeError: unsupported operand type(s) for /: 'str' and 'str'

	>>> matrix_divided([[3, 9], [15, 3]])
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'